{"version":3,"sources":["components/Feedback/Statistics.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js","components/Feedback/Feedback.module.css"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","Feedback","state","addRatingEvent","e","setState","prevState","target","innerText","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","className","s","buttons","grades","map","id","text","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kTAmBeA,EAnBI,SAAAC,GAAU,IACnBC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBACnC,OACE,gCACE,4CAMA,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCiCSC,E,4MAvCbC,MAAQ,CAAEN,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCK,eAAiB,SAAAC,GAEf,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOC,UAAYF,EAAUF,EAAEG,OAAOC,WAAa,O,EAI1DC,mBAAqB,kBACnB,EAAKP,MAAMN,KAAO,EAAKM,MAAML,QAAU,EAAKK,MAAMJ,K,EAEpDY,gCAAkC,kBAChCC,KAAKC,MAAM,EAAKV,MAAMN,MAAQ,EAAKa,qBAAuB,O,uDAElD,IAAD,SACwBI,KAAKX,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,gCACE,sDACA,qBAAKgB,UAAWC,IAAEC,QAAlB,SACGC,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,wBAAiBC,QAAS,EAAKlB,eAA/B,SACGiB,GADUD,QAKjB,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,KAAKJ,qBACZT,mBAAoBa,KAAKH,2C,GAjCZY,aCIRC,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCMSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,wICfAc,EAAOC,QAAU,CAAC,QAAU,6B","file":"static/js/main.ad11d0d9.chunk.js","sourcesContent":["const Statistics = props => {\r\n  const { good, neutral, bad, total, positivePercentage } = props;\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      {/* {Object.keys(props.state).map(feedbackRate => (\r\n      <p key={feedbackRate}>\r\n        {feedbackRate}: {props.state[feedbackRate]}\r\n      </p>\r\n    ))} */}\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\r\n\r\nimport grades from './grades.json';\r\nimport s from './Feedback.module.css';\r\n\r\nimport Statistics from './Statistics';\r\n\r\nclass Feedback extends Component {\r\n  state = { good: 0, neutral: 0, bad: 0 };\r\n\r\n  addRatingEvent = e => {\r\n    //console.log(e.target.innerText);\r\n    this.setState(prevState => ({\r\n      [e.target.innerText]: prevState[e.target.innerText] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round(this.state.good / (this.countTotalFeedback() / 100));\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <div>\r\n        <b>Please leave feedback</b>\r\n        <div className={s.buttons}>\r\n          {grades.map(({ id, text }) => (\r\n            <button key={id} onClick={this.addRatingEvent}>\r\n              {text}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={this.countTotalFeedback()}\r\n          positivePercentage={this.countPositiveFeedbackPercentage()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import './App.css';\r\nimport FeedBack from './components/Feedback';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <FeedBack />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Feedback_buttons__1FtLJ\"};"],"sourceRoot":""}